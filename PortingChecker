#!/usr/bin/python
# -*- coding: utf8 -*-
#Porting Checker

__author__ = 'Tan Ying<ying.tan@tcl.com>' 

import os
import sys
import getopt
import commands
from utils import *

logger = log.getLogging('PortingChecker')

def get_confirm_result(string):
    return (string.lower() == 'y' or string.lower() == 'yes') and True or False

def confirm_html_gen_over(filepath):
    print 'If already, Open the corresponding file now?'
    gen_over = raw_input('press y(yes), else(exit) \n')

    if get_confirm_result(gen_over):
        print 'If already, Press CTRL+C to exit'
        os.system('gedit %s' % filepath)

    else:
        print 'Please copy the json to the corresponding path!'

def get_apk_version(dir, apk_info_list, is_pre):
    for root,dirnames,filenames in os.walk(dir):
        for file in filenames:

            filepath = dir + file
            command = 'aapt dump badging %s | grep version' % filepath
            status, output = commands.getstatusoutput(command)
            aapt_str = output.strip()

            name_left = aapt_str.find('name')+6 #{name='}
            name_right = aapt_str.find(' versionCode') - 2
            name = aapt_str[name_left:name_right]

            version_left = aapt_str.find('versionName')+13 #{versionName='}
            version = aapt_str[version_left:-1] 

            if is_pre:
                path = '/custpack/app/unremoveable/priv-app/' + file
            else:
                path = '/custpack/app/unremoveable/' + file

            apk_item = []
            apk_item.append(name)
            apk_item.append(path)
            apk_item.append(version)
            apk_item = tuple(apk_item)
            print apk_item

            apk_info_list.append(apk_item)

def generate_gmsjson_from_dir(dir):
    # gms_dir = dir + '/custo_wimdata_ng/wcustores/App/Unremoveable/GMS/'
    # gms_pri_dir = dir + '/custo_wimdata_ng/wcustores/App/Unremoveable/GMS_pri/'

    gms_dir = dir + '/GMS/'
    gms_pri_dir = dir + '/GMS_pri/'

    if os.path.exists(gms_pri_dir) and os.path.exists(gms_pri_dir):
        #travel the directory to get the demand information
        apk_info_list = []
        get_apk_version(gms_pri_dir, apk_info_list, True)
        get_apk_version(gms_dir, apk_info_list, False)

        change_list_to_json(apk_info_list)
    else:
        raise PortingCheckerError('Invalid directory')

def main():
    """
    The entrance of Porting Checker
    """
    try:
    #getopt方法会自动过滤参数中的引号;为保持统一，对参数的处理默认会过滤掉引号
        opts, args = getopt.getopt(sys.argv[1:], '', ['gen='])
    except getopt.GetoptError, e: 
        print e
        sys.exit(1)

    if opts:
        #opts[0] = [('--config', 'gms')]
        if is_argument_in_dataset(opts[0][1], CONFIG_SET):
        # start config html
            filepath = 'config/' + opts[0][1]
            js_filepath = config.STANDARD_JSON_CONFIG_JS
            if generate_config_jsfile(filepath, js_filepath):
                os.system('firefox %s' % HTML_GENERATER)
                confirm_html_gen_over(filepath)
        elif opts[0][1] == 'gmsdir':
            project_dir = raw_input('Please input the Project directory path:')
            generate_gmsjson_from_dir(project_dir)
        else:
            print INVALID_CONFIG_ARGUMENT
    else:
        start_checking()

def check_handler(standard_dict, path_dict):
    diff_dict = {}

    for pkg in standard_dict:
        print 'Checking %s now...' % pkg
        diff_dict[pkg] = {}

        if path_dict.has_key(pkg):
            # compare path
            pkg_path = path_dict[pkg]
            if standard_dict[pkg].has_key('path'):
                result = compare_string(standard_dict[pkg]['path'], pkg_path)
                if not result:
                    diff_dict[pkg]['pkg_path'] = pkg_path
                    diff_dict[pkg]['standard_path'] = standard_dict[pkg]['path']
                    print '    Different path,'
                    print '        standard_path: %s' % standard_dict[pkg]['path']
                    print '        pkg_path: %s' % pkg_path
                else:
                    print '    Equal path'
            else:
                #raise StandardJsonError('Package:%s lack versionName in standard.json')
                print 'Error: %s lack versionName in standard.json' % pkg
                sys.exit(1)

            pkg_version = get_version_from_phone(pkg)
            if not pkg_version:
                pkg_version = ''

            # compare version
            if standard_dict[pkg].has_key('versionName'):
                result = compare_string(standard_dict[pkg]['versionName'], pkg_version)
                if not result:
                    diff_dict[pkg]['pkg_version'] = pkg_version
                    diff_dict[pkg]['standard_verison'] = standard_dict[pkg]['versionName']
                    print '    Different versionName,'
                    print '        standard_verison: %s' % standard_dict[pkg]['versionName']
                    print '        pkg_version: %s' % pkg_version

                else:
                    print '    Equal version'
            else:
                #raise StandardJsonError('Package:%s lack versionName in standard.json' % pkg)
                print 'Error: %s lack versionName in standard.json' % pkg
                sys.exit(1)

        else:
            #out put error msg
            print '    Package not porting.'
            diff_dict[pkg]['info'] = 'Package not porting.'

    return diff_dict

def start_checking():
    # The standard_dict for comparation, transfered form standard.json
    if not (os.path.isfile(STANDARD_3RD_FILE) and os.path.isfile(STANDARD_GMS_FILE)):
        #raise PortingCheckerError('Not found the 3rd.json or gms.json')
        print 'Error: Not found the 3rd.json or gms.json'
        sys.exit(1)
    else:
        third_dict = get_standard_pkg_config(STANDARD_3RD_FILE)
        gms_dict = get_standard_pkg_config(STANDARD_GMS_FILE)
        standard_dict = merge_dict(third_dict, gms_dict)
    # The path_dict from phone
    path_dict = get_path_from_phone()
    # get the difference dict
    diff_dict = check_handler(standard_dict, path_dict)
    # displace diff_dict in compare_result.txt
    result_string = ''
    for pkg in diff_dict:
        info = diff_dict[pkg]

        if info:
            result_string += '%s\n' % pkg
            if info.has_key('info'):
                result_string += '    %s\n' % info['info']
            else:
                if info.has_key('pkg_path'):
                    result_string += '    Different path,\n'
                    result_string += '        standard_path: %s\n' % info['standard_path']
                    result_string += '        pkg_path: %s\n' % info['pkg_path']
                if info.has_key('pkg_version'):
                    result_string += '    Different version,\n'
                    result_string += '        standard_version: %s\n' % info['standard_verison']
                    result_string += '        pkg_version: %s\n' % info['pkg_version']
            result_string += '\n'

    f = open(config.RESULT_FILE, 'wb')
    result = str(result_string)
    f.write(result)
    f.close()

if __name__ == '__main__':
    main()


