#!/usr/bin/python
# -*- coding: utf8 -*-
#Get Apk signature list 

__author__ = 'Tan Ying<ying.tan@tcl.com>' 

import os
import sys
import re
import getopt
import commands
import shutil
from utils import *

def get_apk_sign(path):

    print 'Get signature of %s' % path
    command = 'adb pull %s ./bin/' % path
    commands.getstatusoutput(command)

    apkname = get_apkname_form_path(path)
    if os.path.isfile('./bin/%s' % apkname):
        status, output = commands.getstatusoutput('jarsigner -certs -verbose -verify ./bin/%s' % apkname)

        left_index = output.find('CN=')
        temp_string = output[left_index:]
        right_index = temp_string.find(',') 

        signature = temp_string[:right_index]
        print '  %s' % signature
        #os.system('./getcertificate ./bin/%s' % apkname)
        os.remove('./bin/%s' % apkname)
        return signature

def display_signlist(error, normal):
    string = ''
    string += '*****Error Signature List*****\n'
    for apk in error:
        string += '%s: %s\n' % (apk, error[apk])

    string += '\n*****Normal Signature List*****\n'
    for apk in normal:
        string += '%s: %s\n' % (apk, normal[apk])

    f = open(SIGN_RESULT, 'w')
    result = str(string)
    f.write(result)
    f.close()

def main():
    try:
        #--gen选项用于生成json文件, --gen所跟参数只可以是3rd.json和gms.json或者dir <localpath>
        opts, args = getopt.getopt(sys.argv[1:], 'i:b:p:', [])
    except getopt.GetoptError, e: 
        print e
        sys.exit(1)

    if args:
        version= args[0]
    else:
        print HINT_LAKE_VERSION_NAME
        sys.exit(1)

    server_dict = get_dict_from_json(SERVER_ADDRESS)
    
    ip = server_dict['ip']
    branch = server_dict['branch'] 
    project = server_dict['project']

    if opts:
        for opt, value in opts:
            print opt
            if opt == '-i':
                ip = value          
            elif opt == '-b':
                branch = value
            elif opt == '-p':
                project = value     

        server_dict['ip'] = ip
        server_dict['branch'] = branch
        server_dict['project'] = project
        change_dict_to_json(server_dict, SERVER_ADDRESS)

    remote_addr = '%s:/local/build/%s/%s/custo_wimdata_ng/wcustores/%s/App' % (ip, branch, version, project)
    print 'scp %s/3rd.json ./config/' % remote_addr
    os.system('scp %s/3rd.json ./config/' % remote_addr)
    print 'scp %s/gms.json ./config/' % remote_addr
    os.system('scp %s/gms.json ./config/' % remote_addr)

    try:
        #Get the path_dict from phone
        command = 'adb shell pm list packages -f > %s' % PATH_FILE
        status = os.system(command)

        if status == 0:#normal usb debug
            error_dict = {}
            normal_dict = {}

            if os.path.isfile(config.PATH_FILE):
                path_dict = get_pkg_path_dict()

                for pkg in path_dict:
                    apk_path = path_dict[pkg]

                    #if apk_path.find('/system/') == 0:                        
                    signature = get_apk_sign(apk_path)

                    if signature and signature.find('Android') == -1:
                        normal_dict[apk_path] = signature
                    else:
                        error_dict[apk_path] = signature

                display_signlist(error_dict, normal_dict)

            else:
                sys.exit(1)          
        else:
            print(HINT_UNCONNECTED_USB)
    except (EOFError, KeyboardInterrupt):
        print HINT_EXIT
        sys.exit(1)    

if __name__ == '__main__':
	main()